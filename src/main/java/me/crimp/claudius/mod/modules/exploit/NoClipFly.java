package me.crimp.claudius.mod.modules.exploit;

import me.crimp.claudius.event.EventStage;
import me.crimp.claudius.event.events.PacketEvent;
import me.crimp.claudius.event.events.PacketReceiveEvent;
import me.crimp.claudius.event.events.UpdateWalkingPlayerEvent;
import me.crimp.claudius.mod.modules.Module;
import me.crimp.claudius.mod.setting.Setting;
import me.crimp.claudius.utils.Globals;
import me.crimp.claudius.utils.RotationUtil;
import me.crimp.claudius.utils.Timer;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.server.SPacketPlayerPosLook;
import net.minecraftforge.client.event.RenderWorldLastEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

import java.awt.*;

public class NoClipFly extends Module {
    private final Setting<Integer> flyspeed = this.register(new Setting<>("flyspeed?", 1,0,10));
    private final Setting<Integer> Upspeed = this.register(new Setting<>("Upspeed?", 0,0,1));
    private final Setting<Integer> packets = this.register(new Setting<>("packets?", 15,2,50));
    //DoubleSetting flyspeed = new DoubleSetting("FlySpeed",this,1,0.2,10);
    //DoubleSetting Upspeed = new DoubleSetting("UPSpeed",this,0.1,0.01,1);
   // ColorSetting colr = new ColorSetting("Shitter",this,new Color(27, 190, 103, 207));
    //IntSetting packets = new IntSetting("PAckets",this,15,2,50);
    public NoClipFly() {
        super("NoClipFly", "NoClipFly", Category.EXPLOIT, true, false, false);
    }


    /**Timer updateTimer = new Timer();

    @SubscribeEvent
    public void onUpdateMove(UpdateWalkingPlayerEvent event) {

        mc.player.noClip = true;
    }

    @SubscribeEvent
    public void onUpdate(UpdateWalkingPlayerEvent event) {
        mc.player.capabilities.isFlying = true;

        if(updateTimer.passedMs(2550)) {
            updateTimer.reset();
            return;
        }
        if(updateTimer.passedMs(2500)) {
            return;
        }
        double[] dir = RotationUtil.directionSpeed(this.flyspeed.getValue());
        mc.player.capabilities.setFlySpeed(this.Upspeed.getValue().floatValue());
        mc.player.motionZ = dir[1];
        mc.player.motionX = dir[0];
        for(int i = 0; i < packets.getValue(); i++) {
            mc.player.connection.sendPacket(new CPacketPlayer.PositionRotation(mc.player.posX, mc.player.posY, mc.player.posZ,mc.player.rotationYaw,mc.player.rotationPitch, false));
            mc.player.connection.sendPacket(new CPacketPlayer.PositionRotation(mc.player.prevPosX, mc.player.prevPosY + 0.05, mc.player.prevPosZ,mc.player.rotationYaw,mc.player.rotationPitch, true));
            mc.player.connection.sendPacket(new CPacketPlayer.PositionRotation(mc.player.posX, mc.player.posY, mc.player.posZ,mc.player.rotationYaw,mc.player.rotationPitch, false));
        }
    }

    public void onDisable() {
        mc.player.capabilities.isFlying = false;
        mc.player.noClip = false;
    }
    double realx;
    double realy;
    double realz;

    /**@SubscribeEvent
    public void getPack(PacketReceiveEvent event) {
        if(Event.getPacket() instanceof SPacketPlayerPosLook) {
            if(updateTimer.passedMs(2500)) {
                return;
            }
            realx = ((SPacketPlayerPosLook) getPacket()).x;
            realz =((SPacketPlayerPosLook) PacketEvent.getPacket()).z;
            realy = ((SPacketPlayerPosLook) PacketEvent.getPacket()).y;
            if(true) {
                ((SPacketPlayerPosLook) EventStage.getPacket()).y = mc.player.posY;
                ((SPacketPlayerPosLook) PacketEvent.getPacket()).x = mc.player.posX;
                ((SPacketPlayerPosLook) PacketEvent.getPacket()).z = mc.player.posZ;
                ((SPacketPlayerPosLook) PacketEvent.getPacket()).yaw = mc.player.rotationYaw;
                ((SPacketPlayerPosLook) PacketEvent.getPacket()).pitch = mc.player.rotationPitch;
                mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY, mc.player.posZ, false));
                mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.prevPosX, mc.player.prevPosY + 0.05, mc.player.prevPosZ, true));
                mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY, mc.player.posZ, false));
            }
        }
    }

    @SubscribeEvent
    public void onRender(RenderWorldLastEvent event) {
        if(!nullCheck()) {
            if(realx != 0) {

                double sx = mc.player.boundingBox.maxX-mc.player.boundingBox.minX;
                double sy = mc.player.boundingBox.maxY-mc.player.boundingBox.minY;
                double sz = mc.player.boundingBox.maxZ-mc.player.boundingBox.minZ;

                //EspUtil.boundingESPBox(new AxisAlignedBB(realx-sx/2,realy,realz-sz/2,realx+sx/2,realy+sy,realz+sz/2), colr.getColor().brighter(), 2.0f);
            }
        }
    }**/


}

